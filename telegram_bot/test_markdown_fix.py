#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Markdown
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from utils.statistics import StatisticsManager
from utils.markdown_utils import escape_markdown, safe_markdown_text, format_key_value

def test_markdown_escaping():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    test_strings = [
        "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
        "–¢–µ–∫—Å—Ç —Å _–ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ–º_",
        "–¢–µ–∫—Å—Ç —Å *–∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏*",
        "–¢–µ–∫—Å—Ç —Å `–æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏`",
        "–¢–µ–∫—Å—Ç —Å [–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏] —Å–∫–æ–±–∫–∞–º–∏",
        "–¢–µ–∫—Å—Ç —Å (–∫—Ä—É–≥–ª—ã–º–∏) —Å–∫–æ–±–∫–∞–º–∏",
        "–¢–µ–∫—Å—Ç —Å #—Ä–µ—à—ë—Ç–∫–æ–π",
        "–¢–µ–∫—Å—Ç —Å +–ø–ª—é—Å–æ–º –∏ -–º–∏–Ω—É—Å–æ–º",
        "–¢–µ–∫—Å—Ç —Å =—Ä–∞–≤–Ω–æ",
        "–¢–µ–∫—Å—Ç —Å |–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —á–µ—Ä—Ç–æ–π",
        "–¢–µ–∫—Å—Ç —Å {—Ñ–∏–≥—É—Ä–Ω—ã–º–∏} —Å–∫–æ–±–∫–∞–º–∏",
        "–¢–µ–∫—Å—Ç —Å —Ç–æ—á–∫–æ–π. –ò –µ—â—ë –æ–¥–Ω–æ–π.",
        "–¢–µ–∫—Å—Ç —Å !–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º!",
    ]
    
    for text in test_strings:
        escaped = escape_markdown(text)
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π: {text}")
        print(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {escaped}")
        print("-" * 50)

def test_statistics_report():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    stats = StatisticsManager("test_data")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    stats.record_command('test_command_with_underscores')
    stats.record_scan('test_scan', 5, 100, 10.5)
    stats.record_router_check(3, 5)
    stats.record_error('test_error', 'Test error message with special chars: _*`[]()')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = stats.generate_report()
    print("–û—Ç—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    print(report)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç—á—ë—Ç–∞
    print(f"\n–î–ª–∏–Ω–∞ –æ—Ç—á—ë—Ç–∞: {len(report)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    problematic_chars = ['**', '__']
    for char in problematic_chars:
        if char in report:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–∏–º–≤–æ–ª: {char}")
        else:
            print(f"‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–∏–º–≤–æ–ª {char} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_formatting_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç safe_markdown_text
    test_text = "–¢–µ–∫—Å—Ç —Å _–ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ–º_ –∏ *–∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏*"
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {test_text}")
    print(f"–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π: {safe_markdown_text(test_text)}")
    print(f"–ñ–∏—Ä–Ω—ã–π: {safe_markdown_text(test_text, bold=True)}")
    print(f"–ö–æ–¥: {safe_markdown_text(test_text, code=True)}")
    
    # –¢–µ—Å—Ç format_key_value
    print(f"–ö–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ: {format_key_value('test_key', 'test_value')}")
    print(f"–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {format_key_value('key_with_underscore', 'value_with_*stars*')}")

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Markdown...\n")
    
    try:
        test_markdown_escaping()
        test_statistics_report()
        test_formatting_functions()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –¢–µ–ø–µ—Ä—å Markdown –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Telegram")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc() 