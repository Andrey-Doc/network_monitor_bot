import asyncio
import logging
from typing import Dict, List
from telegram_bot.utils.router_monitor import check_routers_status
from telegram_bot.utils.settings_manager import SettingsManager
from telegram_bot.bot.translations import translate
import os

settings_manager = SettingsManager(base_dir=os.path.abspath(os.path.join(os.path.dirname(__file__), '../../data')))

class BackgroundMonitor:
    def __init__(self, bot, chat_id):
        self.bot = bot
        self.chat_id = chat_id
        self.previous_status = {}
        self.is_running = False
        self.monitoring_task = None
        
    async def start_monitoring(self, interval: int = 300):  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if self.is_running:
            logging.warning("[MONITOR] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        logging.info(f"[MONITOR] –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval}—Å")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        initial_status = await check_routers_status(
            settings_manager.get_setting('routers.ips', []),
            settings_manager.get_setting('routers.ports', [8080, 80, 22])
        )
        offline_routers = []
        for router in initial_status:
            self.previous_status[router['ip']] = router['status']
            if router['status'] != 'online':
                offline_routers.append({
                    'ip': router['ip'],
                    'old_status': None,
                    'new_status': router['status'],
                    'open_ports': router.get('open_ports', [])
                })
        # –ï—Å–ª–∏ –µ—Å—Ç—å offline-—Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if offline_routers:
            await self._send_status_notification(offline_routers)
        
        self.monitoring_task = asyncio.create_task(self._monitoring_loop(interval))
        
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        if not self.is_running:
            return
            
        self.is_running = False
        if self.monitoring_task:
            self.monitoring_task.cancel()
            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                pass
        logging.info("[MONITOR] –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def _monitoring_loop(self, interval: int):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                current_status = await check_routers_status(
                    settings_manager.get_setting('routers.ips', []),
                    settings_manager.get_setting('routers.ports', [8080, 80, 22])
                )
                await self._check_status_changes(current_status)
                await asyncio.sleep(interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logging.error(f"[MONITOR] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
    async def _check_status_changes(self, current_status: List[Dict]):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        changes = []
        
        for router in current_status:
            ip = router['ip']
            current_state = router['status']
            previous_state = self.previous_status.get(ip)
            
            if previous_state != current_state:
                changes.append({
                    'ip': ip,
                    'old_status': previous_state,
                    'new_status': current_state,
                    'open_ports': router['open_ports']
                })
                self.previous_status[ip] = current_state
        
        if changes:
            await self._send_status_notification(changes)
            
    async def _send_status_notification(self, changes: List[Dict]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        lang = 'ru'  # –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        message = str(translate(lang, 'router_status_change_title') or '') + "\n\n"
        for change in changes:
            emoji = "üü¢" if change['new_status'] == 'online' else "üî¥"
            old_status = change['old_status'] if change['old_status'] is not None else 'unknown'
            new_status = change['new_status'] if change['new_status'] is not None else 'unknown'
            open_ports = change['open_ports'] if change.get('open_ports') is not None else []
            message += str(translate(lang, 'router_status_change_line', emoji=emoji, ip=change['ip'], old_status=old_status, new_status=new_status) or '') + "\n"
            if new_status == 'online' and open_ports:
                message += str(translate(lang, 'router_status_change_ports', ports=', '.join(map(str, open_ports))) or '') + "\n"
            message += "\n"
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML'
            )
            logging.info(f"[MONITOR] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ {len(changes)} —Ä–æ—É—Ç–µ—Ä–æ–≤")
        except Exception as e:
            logging.error(f"[MONITOR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
    async def get_current_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        return self.previous_status.copy() 